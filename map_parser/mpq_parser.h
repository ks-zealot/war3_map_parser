//
// Created by zealot on 02.01.2023.
//

#ifndef WAR3_MAP_PARSER_MPQ_PARSER_H
#define WAR3_MAP_PARSER_MPQ_PARSER_H


#include <fstream>
#include <vector>
#include "../data_objects/block_table_entry.h"
#include "../data_objects/hash_table_entry.h"
#include "abstract_map_file_parser.h"

class mpq_parser {
public:
    explicit mpq_parser(std::ifstream &map);

public:
    void parse();

private:
    static unsigned const HEADER_SIZE = 512;
    std::vector<block_table_entry> block_table_entries_container;
    std::vector<hash_table_entry> hash_table_entry_container;

    block_table_entry read_block_entry(char *data, int i);

    hash_table_entry read_hash_entry(char *data, int i);

    int MPQ_HASH_FILE_KEY = 0x300;
    int MPQ_HASH_TYPE_A = 0x100;
    int MPQ_HASH_TYPE_B = 0x200;
    int MPQ_KEY_HASH_TABLE = 0xC3AF3770;  // Obtained by HashString("(hash table)", MPQ_HASH_FILE_KEY)
    int MPQ_KEY_BLOCK_TABLE = 0xEC83B3A3; // Obtained by HashString("(block table)", MPQ_HASH_FILE_KEY)
    std::ifstream &_map;

    void parse_header();

    void read_block(char *data, int i);

    void read_block_(char *data, int i);

    void read_block(char *data, int i, std::string filename);

     unsigned cryptTable[0x500];

    unsigned long HashString(char *lpszFileName, unsigned long dwHashType);

    void prepareCryptTable();

    void read_hash_entry(int i);

    void DecryptData(void *lpbyBuffer, unsigned long dwLength, unsigned long dwKey);

    void DecryptMpqBlock(void *pvDataBlock, unsigned dwLength, unsigned dwKey1);

    void DecryptBlock(void *block, int length, unsigned int key);

    unsigned int HashString(const char *szFileName, unsigned int dwHashType);

    unsigned char AsciiToUpperTable[256] =
            {
                    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
                    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x5C,
                    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
                    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
                    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
                    0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
                    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
                    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
                    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
                    0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
                    0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
                    0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
                    0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
                    0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
                    0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
            };

    // Compression types for multiple compressions
    unsigned char MPQ_COMPRESSION_HUFFMANN = 0x01;// Huffmann compression (used on WAVE files only)
    unsigned char MPQ_COMPRESSION_ZLIB = 0x02; // ZLIB compression
    unsigned char MPQ_COMPRESSION_PKWARE = 0x08;// PKWARE DCL compression
    unsigned char MPQ_COMPRESSION_BZIP2 = 0x10;// BZIP2 compression (added in Warcraft III)
    unsigned char MPQ_COMPRESSION_SPARSE = 0x20;// Sparse compression (added in Starcraft 2)
    unsigned char MPQ_COMPRESSION_ADPCM_MONO = 0x40; // IMA ADPCM compression (mono)
    unsigned char MPQ_COMPRESSION_ADPCM_STEREO = 0x80; // IMA ADPCM compression (stereo)
    unsigned char MPQ_COMPRESSION_LZMA = 0x12; // LZMA compression. Added in Starcraft 2. This value is NOT a combination of flags.
    unsigned char MPQ_COMPRESSION_NEXT_SAME = 0xFFFFFFFF;  // Same compression

    friend class block_table_entry;

    unsigned int get_block_index(const char *string);

    unsigned int calculate_offset(const block_table_entry &entry);

    unsigned int calculate_byte_to_read(const block_table_entry &entry);

    unsigned int calculate_key(const char *str, const block_table_entry &entry);

    std::vector<std::string> parse_list_file(std::string basicString);

    abstract_map_file_parser *get_parser(std::string basicString, block_table_entry& bp, std::ifstream& map);
};


#endif //WAR3_MAP_PARSER_MPQ_PARSER_H
